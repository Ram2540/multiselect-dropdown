{"version":3,"sources":["components/DropdownCheckbox/DropdownCheckbox.module.css","components/DropdownFilterButton/DropdownFilterButton.module.css","components/DropdownSearch/DropdownSearch.module.css","components/SelectButton/SelectButton.module.css","components/DropdownDropPart/DropdownDropPart.module.css","containers/Dropdown/Dropdown.module.css","state/reducers/dropdownstatus.js","state/reducers/root.js","state/actions/actionTypes.js","state/store/store.js","serviceWorker.js","components/DropdownCheckbox/DropdownCheckbox.js","components/DropdownSearch/DropdownSearch.js","components/SelectButton/SelectButton.js","components/DropdownFilterButton/DropdownFilterButton.js","components/DropdownDropPart/DropdownDropPart.js","containers/Dropdown/Dropdown.js","state/actions/dropdownActions.js","pages/app.js","index.js"],"names":["module","exports","defaultState","dropdownList","addDropsownState","state","action","dropdownId","updatedDropdownList","push","checkedItems","removeDropdownState","console","log","filter","d","addItemsToDropsownState","map","ItemsList","updatedState","find","rootReducer","combineReducers","dropdownStatus","type","middleware","thunk","routerMiddleware","composedEnhancers","compose","applyMiddleware","store","createStore","enableBatching","Boolean","window","location","hostname","match","dropdownCheckbox","props","dropdownCheckboxItemClasses","classes","checked","className","join","onClick","clicked","id","icon","faCheckSquare","style","color","padding","size","faSquare","boxShadow","borderRadius","parse","name","dropdownSearch","faSearch","margin","placeholder","autoFocus","onChange","event","searchWordChnaged","target","value","selectButton","SelectButtonBox","isThisAllButton","faPlusCircle","faTimesCircle","SelectButtonLabel","dropdownFilterButton","buttonFilterClasses","isActive","Button","disabled","label","dropDownDropPart","searchLabel","selectAllLabel","selectNoneLabel","filterLabel","DropdownSearch","handleSearch","SelectButton","clickSelectAll","clickSelectNone","options","item","DropdownCheckbox","key","checkBoxChange","DropdownFilterButton","isFilterActive","fiterButton","DropDown","currentIcon","toggleList","setState","prevState","isOpened","searchWord","handleInputCheckBoxChange","updatedOptions","option","opt","updateOptionsState","handleSelectAll","handleSelectNone","handleSearchChanged","search","toLowerCase","handleSearchChangedThrottled","throttle","handleClickOutside","evt","handleFilterButton","items","getAllCheckedOptions","addItems","updatedSelectedValuesLabel","getSelectedValuesLabel","isFiltered","selectedValuesLabel","updatedIsFilterActive","num","length","selectedLabel","dropdownPluralName","dropdownName","toString","getAvalibleOptions","includes","o","index","indexOf","hilightedName","slice","componentWillUnmount","Pluralize","singular","faGlobe","faTabletAlt","faLink","faList","_uniqueId","addDropdownState","this","dropPart","DropdownDropPart","dropdownMainClasses","dropdownLabelSelected","Fragment","faSortDown","Component","connect","dispatch","dropdownActions","onClickOutside","App","data","importedData","Object","keys","i","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ae836d7b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckboxItem\":\"DropdownCheckbox_CheckboxItem__2pZnf\",\"CheckboxItemActive\":\"DropdownCheckbox_CheckboxItemActive__1JyIS\",\"CheckboxItemLabel\":\"DropdownCheckbox_CheckboxItemLabel__bTj2D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ButtonFilter\":\"DropdownFilterButton_ButtonFilter__3TZWC\",\"ButtonFilterActive\":\"DropdownFilterButton_ButtonFilterActive__HtXW0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Search\":\"DropdownSearch_Search__1oKx3\",\"SearchInput\":\"DropdownSearch_SearchInput__2tbHP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SelectButtonBox\":\"SelectButton_SelectButtonBox__2cDS9\",\"SelectButtonLabel\":\"SelectButton_SelectButtonLabel__1vODL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DropdownDropPartWrapper\":\"DropdownDropPart_DropdownDropPartWrapper__1Ri0F\",\"DropdownDropPart\":\"DropdownDropPart_DropdownDropPart__3m8us\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DropdownWrapper\":\"Dropdown_DropdownWrapper__2IJhs\",\"DropdownMain\":\"Dropdown_DropdownMain__337F9\",\"DropdownMainActive\":\"Dropdown_DropdownMainActive__2iHOx\",\"LabelMain\":\"Dropdown_LabelMain__2t_jo\",\"LabelSelected\":\"Dropdown_LabelSelected__3zvAS\",\"LabelSelectedFiltered\":\"Dropdown_LabelSelectedFiltered__1EG67\"};","/* ++++++++++ --------------- IMPORTS --------------- ++++++++++ */\r\n// libraries\r\n// actions\r\nimport * as actionTypes from '../actions/actionTypes'\r\n\r\n/* ========== ~~~~~~~~~~ DROPDOWN STATUS : REDUCER ~~~~~~~~~~ ========== */\r\n// DEFAULT STATE\r\nconst defaultState = {\r\n    // please fill this in\r\n    dropdownList: []\r\n};\r\n\r\nconst addDropsownState = (state, action) => {\r\n    if (action.dropdownId) {\r\n        const updatedDropdownList = [...state.dropdownList]\r\n        updatedDropdownList.push({\r\n            dropdownId: action.dropdownId,\r\n            checkedItems: []\r\n        });\r\n        const updatedState = {\r\n            ...state,\r\n            dropdownList: updatedDropdownList\r\n        };\r\n        return updatedState;\r\n    }\r\n    return state;\r\n}\r\n\r\n\r\nconst removeDropdownState = (state, action) => {\r\n    console.log('state');\r\n    if (action.dropdownId) {\r\n        const updatedDropdownList = state.dropdownList.filter(d => d.dropdownId !== action.dropdownId);\r\n        return {\r\n            ...state,\r\n            dropdownList: updatedDropdownList\r\n        };\r\n    }\r\n    return state;\r\n}\r\n\r\nconst addItemsToDropsownState = (state, action) => {\r\n    const updatedDropdownList = state.dropdownList.map(d => d.dropdownId === action.dropdownId ? { dropdownId: action.dropdownId, checkedItems: action.ItemsList } : d);\r\n    const updatedState = {\r\n        ...state,\r\n        dropdownList: updatedDropdownList\r\n    };\r\n    console.log('-------------------------------------------------------------------------');\r\n    console.log('-----All state-----');\r\n    console.log(updatedState);\r\n    console.log('-----Current Dropdown Sate-----');\r\n    console.log(updatedDropdownList.find(d => d.dropdownId === action.dropdownId).checkedItems);\r\n    return {\r\n        ...state,\r\n        dropdownList: [...updatedDropdownList]\r\n    }\r\n}\r\n\r\n// REDUCER\r\nexport const dropdownStatus = (state = defaultState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.ADD_DROPDOWN_STATE:\r\n            return addDropsownState(state, action);\r\n        case actionTypes.ADD_ITEMS_TO_DROPDOWN:\r\n\r\n            return addItemsToDropsownState(state, action);\r\n        case actionTypes.REMOVE_DROPDOWN_STATE:\r\n            return removeDropdownState(state, action);\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","/* ++++++++++ --------------- IMPORTS --------------- ++++++++++ */\r\n// libraries\r\nimport { combineReducers } from 'redux';\r\n// reducers\r\nimport { dropdownStatus } from './dropdownstatus';\r\n\r\n\r\n\r\n/* ========== ~~~~~~~~~~ ROOT REDUCER ~~~~~~~~~~ ========== */\r\n// used to combine all various reducers together into an easily accesible object\r\nexport const rootReducer = combineReducers({\r\n    dropdownStatus\r\n});\r\n","export const ADD_DROPDOWN_STATE = 'ADD_DROPDOWN_STATE';\r\nexport const REMOVE_DROPDOWN_STATE = 'REMOVE_DROPDOWN_STATE';\r\n\r\nexport const ADD_ITEMS_TO_DROPDOWN = 'ADD_ITEMS_TO_DROPDOWN';\r\n","/* ++++++++++ --------------- IMPORTS --------------- ++++++++++ */\r\n// libraries\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport { routerMiddleware } from 'react-router-redux';\r\nimport { enableBatching } from 'redux-batched-actions';\r\nimport thunk from 'redux-thunk';\r\n// reducers\r\nimport { rootReducer } from '../reducers/root';\r\n\r\n\r\n\r\n// .......... STORE HELPERS .......... //\r\nconst enhancers = [];\r\nconst middleware = [\r\n    thunk, // used for asynchronous actions\r\n    routerMiddleware()\r\n];\r\n\r\nconst composedEnhancers = compose(\r\n    applyMiddleware(...middleware),\r\n    ...enhancers\r\n);\r\n\r\n\r\n\r\n/* ========== ~~~~~~~~~~ STORE (application state) ~~~~~~~~~~ ========== */\r\nconst store = createStore(\r\n    enableBatching(rootReducer),\r\n    composedEnhancers,\r\n);\r\n\r\n\r\n\r\n/* ++++++++++ --------------- EXPORTS --------------- ++++++++++ */\r\nexport default store;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCheckSquare, faSquare } from \"@fortawesome/free-solid-svg-icons\";\r\nimport parse from 'html-react-parser';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport * as classes from './DropdownCheckbox.module.css'\r\n\r\nconst dropdownCheckbox = (props) => {\r\n    let dropdownCheckboxItemClasses = [classes.CheckboxItem];\r\n    if (props.checked) {\r\n        dropdownCheckboxItemClasses = [classes.CheckboxItem, classes.CheckboxItemActive];\r\n    }\r\n\r\n    return (<div className={dropdownCheckboxItemClasses.join(' ')} onClick={() => props.clicked(props.id)}>\r\n        {props.checked ?\r\n            <FontAwesomeIcon\r\n                icon={faCheckSquare}\r\n                style={{\r\n                    color: 'rgb(23,149,244)',\r\n                    padding: '1px'\r\n                }}\r\n                size=\"lg\" /> :\r\n            <FontAwesomeIcon\r\n                icon={faSquare}\r\n                style={{\r\n                    color: 'rgb(250,251,252)',\r\n                    boxShadow: 'inset 0 0 0.2rem rgb(222,222,222)',\r\n                    borderRadius: '0.2rem',\r\n                    padding: '1px'\r\n                }}\r\n                size=\"lg\" />}\r\n        <label className={classes.CheckboxItemLabel}>{parse(props.name)}</label>\r\n    </div>\r\n    )\r\n}\r\n\r\ndropdownCheckbox.propTypes = {\r\n    checked: PropTypes.bool,\r\n    name: PropTypes.string.isRequired,\r\n    id: PropTypes.oneOfType([\r\n        PropTypes.string,\r\n        PropTypes.number\r\n    ]).isRequired,\r\n    clicked: PropTypes.func\r\n}\r\n\r\nexport default dropdownCheckbox;\r\n\r\n","import React from 'react';\r\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport * as classes from './DropdownSearch.module.css';\r\n\r\nconst dropdownSearch = (props) => {\r\n\r\n    return (<div className={classes.Search}>\r\n        <FontAwesomeIcon icon={faSearch} size=\"lg\"\r\n            style={{\r\n                color: 'rgb(206, 214, 227)',\r\n                margin: '0.2rem'\r\n            }}\r\n        />\r\n        <input\r\n            className={classes.SearchInput}\r\n            type=\"text\"\r\n            placeholder={props.placeholder}\r\n            autoFocus\r\n            onChange={(event) => {\r\n                return props.searchWordChnaged(event.target.value);\r\n            }\r\n            }\r\n        />\r\n    </div>\r\n    )\r\n}\r\n\r\ndropdownSearch.propTypes = {\r\n    placeholder: PropTypes.string,\r\n    searchWordChnaged: PropTypes.func\r\n}\r\n\r\n\r\nexport default dropdownSearch;","import React from 'react'\r\nimport { faPlusCircle, faTimesCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport PropTypes from 'prop-types';\r\n\r\nimport classes from './SelectButton.module.css'\r\n\r\nconst selectButton = (props) => (\r\n     <div className={classes.SelectButtonBox} onClick={props.clicked}>\r\n          <FontAwesomeIcon icon={props.isThisAllButton ? faPlusCircle : faTimesCircle} />\r\n          <label className={classes.SelectButtonLabel}>{props.name}</label>\r\n     </div>\r\n)\r\n\r\nselectButton.propTypes = {\r\n     clicked: PropTypes.func,\r\n     name: PropTypes.string,\r\n     isThisAllButton: PropTypes.bool\r\n}\r\n\r\nexport default selectButton;","import React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport * as classes from './DropdownFilterButton.module.css'\r\n\r\nconst dropdownFilterButton = (props) => {\r\n    let  buttonFilterClasses = [classes.ButtonFilter];\r\n    if (props.isActive) {\r\n        buttonFilterClasses = [classes.ButtonFilter, classes.ButtonFilterActive];\r\n    }\r\n\r\n    return (\r\n        <Button className={buttonFilterClasses.join(' ')} disabled={!props.isActive} onClick={props.clicked}>{props.label}</Button>\r\n    )\r\n}\r\n\r\ndropdownFilterButton.propTypes = {\r\n    isActive: PropTypes.bool,\r\n    label: PropTypes.string,\r\n    clicked: PropTypes.func,\r\n}\r\n\r\nexport default dropdownFilterButton;","import React from 'react'\r\nimport DropdownCheckbox from '../DropdownCheckbox/DropdownCheckbox';\r\nimport DropdownSearch from '../DropdownSearch/DropdownSearch';\r\nimport SelectButton from '../SelectButton/SelectButton';\r\nimport DropdownFilterButton from '../DropdownFilterButton/DropdownFilterButton';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport * as classes from './DropdownDropPart.module.css';\r\n\r\n\r\n\r\nconst dropDownDropPart = (props) => {\r\n\r\n    const searchLabel = props.searchLabel ?? 'Search';\r\n    const selectAllLabel = props.selectAllLabel ?? 'Select all';\r\n    const selectNoneLabel = props.selectNoneLabel ?? 'Select none';\r\n    const filterLabel = props.filterLabel ?? 'Filter';\r\n    return (\r\n        <div className={classes.DropdownDropPartWrapper}>\r\n            <div className={classes.DropdownDropPart}>\r\n                <DropdownSearch\r\n                    placeholder={searchLabel}\r\n                    searchWordChnaged={props.handleSearch}\r\n                />\r\n                <SelectButton\r\n                    name={selectAllLabel}\r\n                    clicked={props.clickSelectAll}\r\n                    isThisAllButton={true}\r\n                />\r\n                <SelectButton\r\n                    name={selectNoneLabel}\r\n                    clicked={props.clickSelectNone}\r\n                />\r\n                {props.options.map((item) => (\r\n                    <DropdownCheckbox key={item.id}\r\n                        id={item.id}\r\n                        name={item.name}\r\n                        checked={item.checked}\r\n                        clicked={props.checkBoxChange}\r\n                    />\r\n                ))}\r\n            </div>\r\n            <DropdownFilterButton label={filterLabel} isActive={props.isFilterActive} clicked={props.fiterButton} />\r\n        </div>\r\n    )\r\n}\r\n\r\ndropDownDropPart.propTypes = {\r\n    options: PropTypes.array.isRequired,\r\n    checkBoxChange: PropTypes.func.isRequired,\r\n    handleSearch: PropTypes.func.isRequired,\r\n    clickSelectAll: PropTypes.func,\r\n    clickSelectNone: PropTypes.func,\r\n    isFilterActive: PropTypes.bool,\r\n    fiterButton: PropTypes.func,\r\n    searchLabel: PropTypes.string,\r\n    selectAllLabel: PropTypes.string,\r\n    selectNoneLabel: PropTypes.string,\r\n    filterLabel: PropTypes.string,\r\n};\r\n\r\n\r\nexport default dropDownDropPart;","/* ++++++++++ --------------- IMPORTS --------------- ++++++++++ */\r\n// libraries\r\nimport React, { Component } from 'react';\r\nimport Pluralize from 'pluralize';\r\nimport DropdownDropPart from '../../components/DropdownDropPart/DropdownDropPart';\r\nimport { faLink, faTabletAlt, faGlobe, faSortDown, faList } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { connect } from 'react-redux'\r\nimport { throttle } from 'lodash';\r\nimport * as dropdownActions from '../../state/actions/dropdownActions'\r\nimport onClickOutside from \"react-onclickoutside\";\r\nimport _uniqueId from 'lodash/uniqueId';\r\nimport PropTypes from 'prop-types';\r\n// styles\r\nimport * as classes from './Dropdown.module.css';\r\n\r\n\r\n/* ========== ~~~~~~~~~~ DROPDOWN ~~~~~~~~~~ ========== */\r\nclass DropDown extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tlet currentIcon;\r\n\t\tswitch (Pluralize.singular(props.dropdownName)) {\r\n\t\t\tcase 'Country':\r\n\t\t\t\tcurrentIcon = faGlobe;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'Device':\r\n\t\t\t\tcurrentIcon = faTabletAlt;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'Site':\r\n\t\t\t\tcurrentIcon = faLink;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tcurrentIcon = faList;\r\n\t\t}\r\n\r\n\t\tthis.state = {\r\n\t\t\tdropdownId: _uniqueId('dropdownUID-'),\r\n\t\t\toptions: props.options,\r\n\t\t\ticon: currentIcon,\r\n\t\t\tdropdownName: Pluralize.singular(props.dropdownName),\r\n\t\t\tdropdownPluralName: Pluralize(props.dropdownName),\r\n\t\t\tselectedValuesLabel: 'All ' + Pluralize(props.dropdownName),\r\n\t\t\tisOpened: false,\r\n\t\t\tisFilterActive: false,\r\n\t\t\tisFiltered: false,\r\n\t\t\tsearchWord: null,\r\n\t\t}\r\n\r\n\t\tprops.addDropdownState(this.state.dropdownId);\r\n\t}\r\n\r\n\ttoggleList = () => {\r\n\t\tthis.setState(prevState => ({\r\n\t\t\tisOpened: !prevState.isOpened,\r\n\t\t\tsearchWord: null\r\n\t\t}))\r\n\t}\r\n\r\n\thandleInputCheckBoxChange = (id) => {\r\n\t\tconst updatedOptions = [...this.state.options];\r\n\t\tconst option = updatedOptions.find(opt => opt.id === id);\r\n\t\toption.checked = !option.checked;\r\n\t\tthis.updateOptionsState(updatedOptions);\r\n\t}\r\n\r\n\thandleSelectAll = () => {\r\n\t\tconst updatedOptions = this.state.options.map(opt => { opt.checked = true; return opt; });\r\n\t\tthis.updateOptionsState(updatedOptions);\r\n\t}\r\n\r\n\thandleSelectNone = () => {\r\n\t\tconst updatedOptions = this.state.options.map(opt => { opt.checked = false; return opt; });\r\n\t\tthis.updateOptionsState(updatedOptions);\r\n\t}\r\n\r\n\thandleSearchChanged = (search) => {\r\n\t\tthis.setState({ searchWord: search.toLowerCase() });\r\n\t}\r\n\r\n\thandleSearchChangedThrottled = throttle(this.handleSearchChanged, 700);\r\n\r\n\thandleClickOutside = evt => {\r\n\t\tif (this.state.isOpened) {\r\n\t\t\tthis.toggleList();\r\n\t\t}\r\n\t};\r\n\r\n\thandleFilterButton = () => {\r\n\t\tthis.toggleList();\r\n\t\tconst items = this.getAllCheckedOptions();\r\n\t\tthis.props.addItems(this.state.dropdownId, items);\r\n\r\n\t\tconst updatedSelectedValuesLabel = this.getSelectedValuesLabel();\r\n\t\tthis.setState({\r\n\t\t\tisFiltered: true,\r\n\t\t\tselectedValuesLabel: updatedSelectedValuesLabel\r\n\t\t})\r\n\t}\r\n\r\n\tupdateOptionsState = (updatedOptions) => {\r\n\t\tlet updatedIsFilterActive = false;\r\n\t\tconst option = updatedOptions.find(opt => opt.checked === true);\r\n\t\tif (option) {\r\n\t\t\tupdatedIsFilterActive = true;\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\toptions: updatedOptions,\r\n\r\n\t\t\tisFilterActive: updatedIsFilterActive\r\n\t\t});\r\n\t}\r\n\r\n\tgetSelectedValuesLabel = () => {\r\n\t\tconst num = this.state.options.filter(opt => opt.checked).length;\r\n\t\tlet selectedLabel = 'All ' + this.state.dropdownPluralName;\r\n\r\n\t\tif (num < this.state.options.length && num > 0) {\r\n\t\t\tconst name = num === 1 ? this.state.dropdownName : this.state.dropdownPluralName;\r\n\t\t\tselectedLabel = num.toString() + ' ' + name + ' selected';\r\n\t\t}\r\n\t\treturn selectedLabel;\r\n\t}\r\n\r\n\tgetAvalibleOptions = () => {\r\n\t\tif (this.state.searchWord && this.state.searchWord !== \"\") {\r\n\r\n\t\t\tconst filteredOptions = this.state.options\r\n\t\t\t\t.filter(opt =>\r\n\t\t\t\t\topt.name.toLowerCase().includes(this.state.searchWord));\r\n\r\n\t\t\tconst filteredOptionsBold = filteredOptions.map(o => {\r\n\t\t\t\tconst index = o.name.toLowerCase().indexOf(this.state.searchWord);\r\n\t\t\t\tconst hilightedName = o.name.slice(0, index)\r\n\t\t\t\t\t+ '<strong>'\r\n\t\t\t\t\t+ o.name.slice(index, index + this.state.searchWord.length)\r\n\t\t\t\t\t+ '</strong>'\r\n\t\t\t\t\t+ o.name.slice(index + this.state.searchWord.length);\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...o,\r\n\t\t\t\t\t//name: o.name.replace(this.state.searchWord, '<strong>' + this.state.searchWord + '</strong>')\r\n\t\t\t\t\tname: hilightedName\r\n\t\t\t\t};\r\n\t\t\t});\r\n\t\t\treturn filteredOptionsBold;\r\n\t\t}\r\n\t\treturn this.state.options;\r\n\t}\r\n\r\n\tgetAllCheckedOptions() {\r\n\t\treturn this.state.options.filter(opt => opt.checked);\r\n\t}\r\n\r\n\tcomponentWillUnmount = () => {\r\n\t\tthis.props.removeDropdownState(this.state.dropdownId);\r\n\t}\r\n\r\n\trender() {\r\n\t\tlet dropPart = null;\r\n\t\tif (this.state.isOpened) {\r\n\t\t\tconst searchLabel = 'Search ' + this.state.dropdownName;\r\n\t\t\tdropPart = <DropdownDropPart\r\n\t\t\t\toptions={this.getAvalibleOptions()}\r\n\t\t\t\tcheckBoxChange={this.handleInputCheckBoxChange}\r\n\t\t\t\tsearchLabel={searchLabel}\r\n\t\t\t\thandleSearch={this.handleSearchChangedThrottled}\r\n\t\t\t\tclickSelectAll={this.handleSelectAll}\r\n\t\t\t\tclickSelectNone={this.handleSelectNone}\r\n\t\t\t\tisFilterActive={this.state.isFilterActive}\r\n\t\t\t\tfiterButton={this.handleFilterButton}\r\n\t\t\t/>\r\n\t\t}\r\n\r\n\t\tlet dropdownMainClasses = [classes.DropdownMain];\r\n\t\tif (this.state.isOpened) {\r\n\t\t\tdropdownMainClasses = [classes.DropdownMain, classes.DropdownMainActive];\r\n\t\t}\r\n\r\n\t\tlet dropdownLabelSelected = [classes.LabelSelected];\r\n\t\tif (this.state.isFiltered) {\r\n\t\t\tdropdownLabelSelected = [classes.LabelSelected, classes.LabelSelectedFiltered];\r\n\t\t}\r\n\r\n\r\n\t\treturn (\r\n\t\t\t<React.Fragment>\r\n\t\t\t\t<div className={classes.DropdownWrapper}>\r\n\t\t\t\t\t<div className={dropdownMainClasses.join(' ')} onClick={this.toggleList}>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<FontAwesomeIcon\r\n\t\t\t\t\t\t\t\ticon={this.state.icon}\r\n\t\t\t\t\t\t\t\tsize=\"lg\"\r\n\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\tcolor: 'rgb(200,200,200)',\r\n\t\t\t\t\t\t\t\t}} />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<label className={classes.LabelMain}>{this.state.dropdownPluralName}</label>\r\n\t\t\t\t\t\t\t<label className={dropdownLabelSelected.join(' ')}>{this.state.selectedValuesLabel}</label>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<FontAwesomeIcon icon={faSortDown} />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t{dropPart}\r\n\t\t\t\t</div>\r\n\t\t\t</React.Fragment>\r\n\t\t)\r\n\t}\r\n\r\n\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\treturn {\r\n\t\taddDropdownState: (id) => dispatch(dropdownActions.addDropdownState(id)),\r\n\t\tremoveDropdownState: (id) => dispatch(dropdownActions.removeDropdownState(id)),\r\n\t\taddItems: (id, items) => dispatch(dropdownActions.addItemsToDropdownState(id, items))\r\n\t}\r\n}\r\n\r\nDropDown.propTypes = {\r\n\tdropdownName: PropTypes.string.isRequired,\r\n\toptions: PropTypes.arrayOf(PropTypes.shape({\r\n\t\tid: PropTypes.oneOfType([\r\n\t\t\tPropTypes.number,\r\n\t\t\tPropTypes.string\r\n\t\t]).isRequired,\r\n\t\tname: PropTypes.string.isRequired\r\n\t})).isRequired\r\n};\r\n\r\n/* ++++++++++ --------------- EXPORTS --------------- ++++++++++ */\r\nexport default connect(null, mapDispatchToProps)(onClickOutside(DropDown));\r\n","/* ++++++++++ --------------- EXPORTS --------------- ++++++++++ */\r\nimport * as actionTypes from './actionTypes';\r\n\r\nexport const addDropdownState = (id) => ({\r\n    type: actionTypes.ADD_DROPDOWN_STATE,\r\n    dropdownId: id\r\n});\r\n\r\nexport const removeDropdownState = (id) => ({\r\n    type: actionTypes.REMOVE_DROPDOWN_STATE,\r\n    dropdownId: id\r\n});\r\n\r\nexport const addItemsToDropdownState = (id, items) => (\r\n    {\r\n        type: actionTypes.ADD_ITEMS_TO_DROPDOWN,\r\n        dropdownId: id,\r\n        ItemsList: items\r\n    }\r\n);\r\n\r\n\r\n\r\n","/* ++++++++++ --------------- IMPORTS --------------- ++++++++++ */\r\n// libraries\r\nimport React from 'react';\r\n// material\r\nimport DropDown from '../containers/Dropdown/Dropdown';\r\nimport importedData from \"../data/data.json\";\r\n// styles\r\nimport './app.css';\r\n\r\n\r\n\r\n/* ========== ~~~~~~~~~~ APP ~~~~~~~~~~ ========== */\r\nconst App = (props) => {\r\n\r\n  const data = importedData;\r\n\r\n  return (\r\n    <div className={`app`}>\r\n      {Object.keys(data).map((name, i) => {\r\n        return <DropDown\r\n          key={i}\r\n          dropdownName={name}\r\n          options={data[name]}\r\n          />\r\n      }\r\n      )}\r\n    </div>\r\n  )\r\n};\r\n\r\n\r\n\r\n/* ++++++++++ --------------- EXPORTS --------------- ++++++++++ */\r\nexport default App;\r\n","/* ++++++++++ --------------- IMPORTS --------------- ++++++++++ */\r\n// libraries\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport store from './state/store/store';\r\nimport * as serviceWorker from './serviceWorker';\r\n// components\r\nimport App from './pages/app';\r\n// styles\r\nimport './index.css';\r\n\r\n\r\n\r\n/* !!!!!!!!!!!!!!!!!! ========== ~~~~~~~~~~ RENDER ~~~~~~~~~~ ========== !!!!!!!!!!!!!!!!!! */\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n  \t<Provider store={store}>\r\n    \t<App />\r\n    </Provider>, \r\n  // </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}